<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Daniil Pintjuk</title>
    <link>https://localhost:1313/</link>
    <description>Recent content on Daniil Pintjuk</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 02 Aug 2019 00:36:02 +0200</lastBuildDate>
    
	<atom:link href="https://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Proposal: Verifiably Secure Orchestration</title>
      <link>https://localhost:1313/blog/proposal-verifiably-secure-orchestration/</link>
      <pubDate>Fri, 02 Aug 2019 00:36:02 +0200</pubDate>
      
      <guid>https://localhost:1313/blog/proposal-verifiably-secure-orchestration/</guid>
      <description>Introduction Some sort of automated orchestration of is a must in a modern, large-scale software service deployment. Kubernets for example is a very popular option.
System administrators define declerativly the resaurces and services. The orkestration service takes care of distribuering the resources and services in order to keep all services avalable, monitoring the health of the service instances, and restarting them in case of crashes and migrating them to when resources go down.</description>
    </item>
    
    <item>
      <title>First post</title>
      <link>https://localhost:1313/blog/first/</link>
      <pubDate>Mon, 01 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://localhost:1313/blog/first/</guid>
      <description>Welcome to my blog</description>
    </item>
    
    <item>
      <title>Function as a Service</title>
      <link>https://localhost:1313/projects/2019-function-as-a-service/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://localhost:1313/projects/2019-function-as-a-service/</guid>
      <description>This is a small GoLang infrastructure app that enables to easy deploy a simple server acting like single functions. The goal was to easily deploy and scale the app horizontally. To achive this we leveraged the scaling, service discovery that come for free in a docker compose and swarm environment.
The core component is the FaaS Gateway that uses docker to dynamicaly descover function and rederect requests to them. The image above illustrates the idaa.</description>
    </item>
    
  </channel>
</rss>